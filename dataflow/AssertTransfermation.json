{
	"name": "AssertTransfermation",
	"properties": {
		"folder": {
			"name": "DataflowTransfermations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_testing_EmpData",
						"type": "DatasetReference"
					},
					"name": "EmpData"
				},
				{
					"dataset": {
						"referenceName": "ds_testing_DeptData",
						"type": "DatasetReference"
					},
					"name": "DeptData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_testing_EmpData",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_testing_DeptData",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "assert"
				},
				{
					"name": "errorsfilter"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMP_ID as string,",
				"          EMP_NAME as string,",
				"          GENDER as string,",
				"          DOJ as string,",
				"          SALARY as string,",
				"          DEPT_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EmpData",
				"source(output(",
				"          EMP_ID as string,",
				"          EMP_NAME as string,",
				"          GENDER as string,",
				"          DOJ as string,",
				"          SALARY as string,",
				"          DEPT_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DeptData",
				"EmpData, DeptData assert(expectTrue(!isNull(toDate(EmpData@DOJ, 'yyyyMMdd')), false, 'DOJCheckassert'),",
				"     expectUnique(EmpData@EMP_ID, false, 'UniqueCheckAssert'),",
				"     expectExists(EmpData@DEPT_ID == DeptData@DEPT_ID, false, 'assert3')) ~> assert",
				"assert filter(isError()) ~> errorsfilter",
				"errorsfilter sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EMP_ID as string,",
				"          EMP_NAME as string,",
				"          GENDER as string,",
				"          DOJ as string,",
				"          SALARY as string,",
				"          DEPT_ID as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     preCommands: [],",
				"     postCommands: []) ~> sink1",
				"DeptData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DEPT_ID as string,",
				"          DEPT_NAME as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     format: 'parquet') ~> sink2"
			]
		}
	}
}